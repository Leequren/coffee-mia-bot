/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * документация для api для mia coffee bot
 * Описание api для демонстрации документации в формате JSON
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  DeleteApiUserFavorite200,
  DeleteApiUserFavoriteBody,
  GetApiItemDripPacks200Item,
  GetApiItemGrain200Item,
  GetApiItemOther200Item,
  GetApiItemParams,
  GrindingType,
  Item,
  PostApiUserFavorite200,
  PostApiUserFavoriteBody,
  ShortItem,
  UserProperties,
} from './model';
import { baseApiRequest } from '../../baseApiRequest';

/**
 * роут для получения всех зёрен
 */
export const getApiItemGrain = (signal?: AbortSignal) => {
  return baseApiRequest<GetApiItemGrain200Item[]>({
    url: `/api/item/grain`,
    method: 'GET',
    signal,
  });
};

export const getGetApiItemGrainQueryKey = () => {
  return [`/api/item/grain`] as const;
};

export const getGetApiItemGrainQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiItemGrain>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemGrain>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiItemGrainQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiItemGrain>>> = ({
    signal,
  }) => getApiItemGrain(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiItemGrain>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiItemGrainQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiItemGrain>>
>;
export type GetApiItemGrainQueryError = unknown;

export function useGetApiItemGrain<
  TData = Awaited<ReturnType<typeof getApiItemGrain>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemGrain>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiItemGrain>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiItemGrain<
  TData = Awaited<ReturnType<typeof getApiItemGrain>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemGrain>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiItemGrain>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiItemGrain<
  TData = Awaited<ReturnType<typeof getApiItemGrain>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemGrain>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiItemGrain<
  TData = Awaited<ReturnType<typeof getApiItemGrain>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemGrain>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiItemGrainQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * роут для получения всех дрип пакетов
 */
export const getApiItemDripPacks = (signal?: AbortSignal) => {
  return baseApiRequest<GetApiItemDripPacks200Item[]>({
    url: `/api/item/dripPacks`,
    method: 'GET',
    signal,
  });
};

export const getGetApiItemDripPacksQueryKey = () => {
  return [`/api/item/dripPacks`] as const;
};

export const getGetApiItemDripPacksQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiItemDripPacks>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiItemDripPacks>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiItemDripPacksQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiItemDripPacks>>
  > = ({ signal }) => getApiItemDripPacks(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiItemDripPacks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiItemDripPacksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiItemDripPacks>>
>;
export type GetApiItemDripPacksQueryError = unknown;

export function useGetApiItemDripPacks<
  TData = Awaited<ReturnType<typeof getApiItemDripPacks>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiItemDripPacks>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiItemDripPacks>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiItemDripPacks<
  TData = Awaited<ReturnType<typeof getApiItemDripPacks>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiItemDripPacks>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiItemDripPacks>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiItemDripPacks<
  TData = Awaited<ReturnType<typeof getApiItemDripPacks>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiItemDripPacks>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiItemDripPacks<
  TData = Awaited<ReturnType<typeof getApiItemDripPacks>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiItemDripPacks>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiItemDripPacksQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * роут для получения разных вещей
 */
export const getApiItemOther = (signal?: AbortSignal) => {
  return baseApiRequest<GetApiItemOther200Item[]>({
    url: `/api/item/other`,
    method: 'GET',
    signal,
  });
};

export const getGetApiItemOtherQueryKey = () => {
  return [`/api/item/other`] as const;
};

export const getGetApiItemOtherQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiItemOther>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemOther>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiItemOtherQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiItemOther>>> = ({
    signal,
  }) => getApiItemOther(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiItemOther>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiItemOtherQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiItemOther>>
>;
export type GetApiItemOtherQueryError = unknown;

export function useGetApiItemOther<
  TData = Awaited<ReturnType<typeof getApiItemOther>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemOther>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiItemOther>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiItemOther<
  TData = Awaited<ReturnType<typeof getApiItemOther>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemOther>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiItemOther>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiItemOther<
  TData = Awaited<ReturnType<typeof getApiItemOther>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemOther>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiItemOther<
  TData = Awaited<ReturnType<typeof getApiItemOther>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemOther>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiItemOtherQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * роут для получения всех новинок
 */
export const getApiItemNew = (signal?: AbortSignal) => {
  return baseApiRequest<ShortItem[]>({
    url: `/api/item/new`,
    method: 'GET',
    signal,
  });
};

export const getGetApiItemNewQueryKey = () => {
  return [`/api/item/new`] as const;
};

export const getGetApiItemNewQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiItemNew>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemNew>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiItemNewQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiItemNew>>> = ({
    signal,
  }) => getApiItemNew(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiItemNew>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiItemNewQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiItemNew>>
>;
export type GetApiItemNewQueryError = unknown;

export function useGetApiItemNew<
  TData = Awaited<ReturnType<typeof getApiItemNew>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemNew>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiItemNew>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiItemNew<
  TData = Awaited<ReturnType<typeof getApiItemNew>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemNew>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiItemNew>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiItemNew<
  TData = Awaited<ReturnType<typeof getApiItemNew>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemNew>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiItemNew<
  TData = Awaited<ReturnType<typeof getApiItemNew>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiItemNew>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiItemNewQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * роут для получения всей продукции, которую пользователь добавил в избранное
 */
export const getApiUserFavorite = (signal?: AbortSignal) => {
  return baseApiRequest<ShortItem[]>({
    url: `/api/user/favorite`,
    method: 'GET',
    signal,
  });
};

export const getGetApiUserFavoriteQueryKey = () => {
  return [`/api/user/favorite`] as const;
};

export const getGetApiUserFavoriteQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUserFavorite>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiUserFavorite>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUserFavoriteQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUserFavorite>>
  > = ({ signal }) => getApiUserFavorite(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUserFavorite>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiUserFavoriteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUserFavorite>>
>;
export type GetApiUserFavoriteQueryError = unknown;

export function useGetApiUserFavorite<
  TData = Awaited<ReturnType<typeof getApiUserFavorite>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiUserFavorite>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiUserFavorite>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiUserFavorite<
  TData = Awaited<ReturnType<typeof getApiUserFavorite>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiUserFavorite>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiUserFavorite>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUserFavorite<
  TData = Awaited<ReturnType<typeof getApiUserFavorite>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiUserFavorite>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiUserFavorite<
  TData = Awaited<ReturnType<typeof getApiUserFavorite>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiUserFavorite>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiUserFavoriteQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * роут для добавления определённого товара в избранное
 */
export const postApiUserFavorite = (
  postApiUserFavoriteBody: PostApiUserFavoriteBody,
  signal?: AbortSignal
) => {
  return baseApiRequest<PostApiUserFavorite200>({
    url: `/api/user/favorite`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: postApiUserFavoriteBody,
    signal,
  });
};

export const getPostApiUserFavoriteMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUserFavorite>>,
    TError,
    { data: PostApiUserFavoriteBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUserFavorite>>,
  TError,
  { data: PostApiUserFavoriteBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUserFavorite>>,
    { data: PostApiUserFavoriteBody }
  > = (props) => {
    const { data } = props ?? {};

    return postApiUserFavorite(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUserFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUserFavorite>>
>;
export type PostApiUserFavoriteMutationBody = PostApiUserFavoriteBody;
export type PostApiUserFavoriteMutationError = unknown;

export const usePostApiUserFavorite = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUserFavorite>>,
    TError,
    { data: PostApiUserFavoriteBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiUserFavorite>>,
  TError,
  { data: PostApiUserFavoriteBody },
  TContext
> => {
  const mutationOptions = getPostApiUserFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * роут для удаления предмета из избранного
 */
export const deleteApiUserFavorite = (
  deleteApiUserFavoriteBody: DeleteApiUserFavoriteBody
) => {
  return baseApiRequest<DeleteApiUserFavorite200>({
    url: `/api/user/favorite`,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    data: deleteApiUserFavoriteBody,
  });
};

export const getDeleteApiUserFavoriteMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiUserFavorite>>,
    TError,
    { data: DeleteApiUserFavoriteBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiUserFavorite>>,
  TError,
  { data: DeleteApiUserFavoriteBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiUserFavorite>>,
    { data: DeleteApiUserFavoriteBody }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiUserFavorite(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiUserFavoriteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiUserFavorite>>
>;
export type DeleteApiUserFavoriteMutationBody = DeleteApiUserFavoriteBody;
export type DeleteApiUserFavoriteMutationError = unknown;

export const useDeleteApiUserFavorite = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiUserFavorite>>,
    TError,
    { data: DeleteApiUserFavoriteBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiUserFavorite>>,
  TError,
  { data: DeleteApiUserFavoriteBody },
  TContext
> => {
  const mutationOptions = getDeleteApiUserFavoriteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * получение информации о товаре по id
 */
export const getApiItem = (params: GetApiItemParams, signal?: AbortSignal) => {
  return baseApiRequest<Item>({
    url: `/api/item`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetApiItemQueryKey = (params: GetApiItemParams) => {
  return [`/api/item`, ...(params ? [params] : [])] as const;
};

export const getGetApiItemQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiItem>>,
  TError = unknown
>(
  params: GetApiItemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiItem>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiItemQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiItem>>> = ({
    signal,
  }) => getApiItem(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiItem>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiItemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiItem>>
>;
export type GetApiItemQueryError = unknown;

export function useGetApiItem<
  TData = Awaited<ReturnType<typeof getApiItem>>,
  TError = unknown
>(
  params: GetApiItemParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiItem>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiItem>>,
          TError,
          TData
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiItem<
  TData = Awaited<ReturnType<typeof getApiItem>>,
  TError = unknown
>(
  params: GetApiItemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiItem>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiItem>>,
          TError,
          TData
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiItem<
  TData = Awaited<ReturnType<typeof getApiItem>>,
  TError = unknown
>(
  params: GetApiItemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiItem>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiItem<
  TData = Awaited<ReturnType<typeof getApiItem>>,
  TError = unknown
>(
  params: GetApiItemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiItem>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiItemQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Получение часто покупаемых товаров
 */
export const getApiItemPopular = (signal?: AbortSignal) => {
  return baseApiRequest<ShortItem[]>({
    url: `/api/item/popular`,
    method: 'GET',
    signal,
  });
};

export const getGetApiItemPopularQueryKey = () => {
  return [`/api/item/popular`] as const;
};

export const getGetApiItemPopularQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiItemPopular>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiItemPopular>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiItemPopularQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiItemPopular>>
  > = ({ signal }) => getApiItemPopular(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiItemPopular>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiItemPopularQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiItemPopular>>
>;
export type GetApiItemPopularQueryError = unknown;

export function useGetApiItemPopular<
  TData = Awaited<ReturnType<typeof getApiItemPopular>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiItemPopular>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiItemPopular>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiItemPopular<
  TData = Awaited<ReturnType<typeof getApiItemPopular>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiItemPopular>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiItemPopular>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiItemPopular<
  TData = Awaited<ReturnType<typeof getApiItemPopular>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiItemPopular>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiItemPopular<
  TData = Awaited<ReturnType<typeof getApiItemPopular>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiItemPopular>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiItemPopularQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Получение всех типов помола для кофе
 */
export const getApiGrindingTypes = (signal?: AbortSignal) => {
  return baseApiRequest<GrindingType[]>({
    url: `/api/grindingTypes`,
    method: 'GET',
    signal,
  });
};

export const getGetApiGrindingTypesQueryKey = () => {
  return [`/api/grindingTypes`] as const;
};

export const getGetApiGrindingTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiGrindingTypes>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiGrindingTypes>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiGrindingTypesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiGrindingTypes>>
  > = ({ signal }) => getApiGrindingTypes(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiGrindingTypes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiGrindingTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiGrindingTypes>>
>;
export type GetApiGrindingTypesQueryError = unknown;

export function useGetApiGrindingTypes<
  TData = Awaited<ReturnType<typeof getApiGrindingTypes>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiGrindingTypes>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiGrindingTypes>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiGrindingTypes<
  TData = Awaited<ReturnType<typeof getApiGrindingTypes>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiGrindingTypes>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiGrindingTypes>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiGrindingTypes<
  TData = Awaited<ReturnType<typeof getApiGrindingTypes>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiGrindingTypes>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiGrindingTypes<
  TData = Awaited<ReturnType<typeof getApiGrindingTypes>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiGrindingTypes>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiGrindingTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * получение информации о пользователе (роут нужен для того, чтобы в начале, когда пользователь запускает приложение, то происходит проверка захода в приложение
 */
export const getApiUser = (signal?: AbortSignal) => {
  return baseApiRequest<UserProperties>({
    url: `/api/user`,
    method: 'GET',
    signal,
  });
};

export const getGetApiUserQueryKey = () => {
  return [`/api/user`] as const;
};

export const getGetApiUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUser>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUser>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUser>>> = ({
    signal,
  }) => getApiUser(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type GetApiUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUser>>
>;
export type GetApiUserQueryError = unknown;

export function useGetApiUser<
  TData = Awaited<ReturnType<typeof getApiUser>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUser>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiUser>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useGetApiUser<
  TData = Awaited<ReturnType<typeof getApiUser>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUser>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiUser>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useGetApiUser<
  TData = Awaited<ReturnType<typeof getApiUser>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUser>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

export function useGetApiUser<
  TData = Awaited<ReturnType<typeof getApiUser>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUser>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetApiUserQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
